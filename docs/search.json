[
  {
    "objectID": "wiki/Workflow.html",
    "href": "wiki/Workflow.html",
    "title": "Workflow",
    "section": "",
    "text": "As our main annotation tool, we use the TimeLineAnnotator (aka. TiLiA), a GUI for producing and displaying complex annotations with video and audio files. For each piece in the corpus, a .tla file will be provided, which includes a recording aligned with a score element (musicXML), a complete beat grid, and an empty hierarchy timeline for creating the form analysis.\nThe newest version of the TiLiA app can be downloaded here or built from source using PyInstaller. Please reference the installation guide to troubleshoot common installation issues, such as safety settings blocking installation.\n\n\n\nBasic information about how to use TiLiA and its different features can be found at:\n\nTiLiA Website\nTiLiA Youtube Channel\nTiLiA GitHub\n\nMiscellaneous Workflow Advice:\n\nMake sure that the file is saved in a non-temporary folder.\nThe saved .tla files cannot be opened by simply clicking on them. This means you always have to open the app first and then the file from the app.\nSave your file regularly to avoid losing progress. You are advised to track changes via git to better remedy file corruption.\nIf the app crashes while you have not saved for a long time, you can check whether a file has been saved in the ‘Autosaves’ folder (File =&gt; Open Autosaves Folder =&gt; Copy path; then File =&gt; Open =&gt; Select path to Autosaves folder and open the last saved version)\nDepending on what you find easier for the music, you may either proceed from larger sections to smaller ones in a top-down way (=&gt; create child, then split the child, shortcut: s), or identify small formal units and group them upwards (shortcut: g).\n\nPlease refer to the Principles page for more detailed guidance on how to use the app in the context of this project.\n\n\n\nA good understanding how git works (creating branches, committing & pushing changes, merge request & merge) is necessary to collaborate on our decentralised annotation project. There is plenty of learning material available online (e.g. Ry’s Tutorial) and you can use whatever you prefer. For a very brief reference of the commands you need to know, see the Quick Git Reference from the DCML corpus initiative, a predecessor of the current project on Musical Form. This reference contains a small collection of useful config options for your local git installation which can make your life easier. If you don’t know git, it may serve as a primer but does not replace a more thorough introduction to git."
  },
  {
    "objectID": "wiki/Workflow.html#installing-tilia",
    "href": "wiki/Workflow.html#installing-tilia",
    "title": "Workflow",
    "section": "",
    "text": "As our main annotation tool, we use the TimeLineAnnotator (aka. TiLiA), a GUI for producing and displaying complex annotations with video and audio files. For each piece in the corpus, a .tla file will be provided, which includes a recording aligned with a score element (musicXML), a complete beat grid, and an empty hierarchy timeline for creating the form analysis.\nThe newest version of the TiLiA app can be downloaded here or built from source using PyInstaller. Please reference the installation guide to troubleshoot common installation issues, such as safety settings blocking installation."
  },
  {
    "objectID": "wiki/Workflow.html#ressources-for-learning-tilia",
    "href": "wiki/Workflow.html#ressources-for-learning-tilia",
    "title": "Workflow",
    "section": "",
    "text": "Basic information about how to use TiLiA and its different features can be found at:\n\nTiLiA Website\nTiLiA Youtube Channel\nTiLiA GitHub\n\nMiscellaneous Workflow Advice:\n\nMake sure that the file is saved in a non-temporary folder.\nThe saved .tla files cannot be opened by simply clicking on them. This means you always have to open the app first and then the file from the app.\nSave your file regularly to avoid losing progress. You are advised to track changes via git to better remedy file corruption.\nIf the app crashes while you have not saved for a long time, you can check whether a file has been saved in the ‘Autosaves’ folder (File =&gt; Open Autosaves Folder =&gt; Copy path; then File =&gt; Open =&gt; Select path to Autosaves folder and open the last saved version)\nDepending on what you find easier for the music, you may either proceed from larger sections to smaller ones in a top-down way (=&gt; create child, then split the child, shortcut: s), or identify small formal units and group them upwards (shortcut: g).\n\nPlease refer to the Principles page for more detailed guidance on how to use the app in the context of this project."
  },
  {
    "objectID": "wiki/Workflow.html#using-git",
    "href": "wiki/Workflow.html#using-git",
    "title": "Workflow",
    "section": "",
    "text": "A good understanding how git works (creating branches, committing & pushing changes, merge request & merge) is necessary to collaborate on our decentralised annotation project. There is plenty of learning material available online (e.g. Ry’s Tutorial) and you can use whatever you prefer. For a very brief reference of the commands you need to know, see the Quick Git Reference from the DCML corpus initiative, a predecessor of the current project on Musical Form. This reference contains a small collection of useful config options for your local git installation which can make your life easier. If you don’t know git, it may serve as a primer but does not replace a more thorough introduction to git."
  },
  {
    "objectID": "wiki/Workflow.html#whats-in-this-repo",
    "href": "wiki/Workflow.html#whats-in-this-repo",
    "title": "Workflow",
    "section": "What’s in this repo?",
    "text": "What’s in this repo?\nYou’ll find a breakdown of what’s included in the repo in its README."
  },
  {
    "objectID": "wiki/Workflow.html#where-to-begin",
    "href": "wiki/Workflow.html#where-to-begin",
    "title": "Workflow",
    "section": "Where to begin?",
    "text": "Where to begin?\n\nPick one of pieces assigned to you and create a new branch reflecting the corresponding file name, followed by your initials, e.g. BWV1007_01_Prelude_jh (to avoid name conflicts for doubly assigned pieces). Be sure that every new branch is created from an up-to-date main branch (in practice, you git checkout main and git pull before creating the new branch).\nOpen TiLiA and load the corresponding .tla file from the TiLiA folder. The app will attempt to find the audio file but when it fails, you will see an error message and then be prompted to select the audio file manually. Either way, once you save the file, you should see the respective file path in the .tla file change (the file is in JSON format).\nYou should be seeing the timelines listed under TiLiA Layout. The most important one is the empty hierarchy timeline called Form."
  },
  {
    "objectID": "wiki/Workflow.html#annotating",
    "href": "wiki/Workflow.html#annotating",
    "title": "Workflow",
    "section": "Annotating",
    "text": "Annotating\n\nCreate your form components and cadence markers. Save and commit every now and then.\n\nIf no key segments are available, create those as well (hierarchy timeline with a single level).\nWhen you end up with two alternative views that you find equally convincing, add a new hierarchy timeline and encode the alternative for the given segment only.\nWhenever useful, add free-text comments to your analytical elements.\nComments not specifically linked with a hierarchy component, e.g. comments on dramaturgical observations, can be added as markers.\n\nWhen problems arise, please let everyone know:\n\nFor technical issues with our workflow, please open an issue in the annotation_pilot repo.\nFor anything related to the annotation standard, please open a discussion instead.\n\nWhen your analysis is done and all commits are pushed, create a Pull Request (PR) in the annotation_pilot repo. Please paste a screenshot of the analysis in the PR description in order to facilitate later discussions. Add a small summary focusing on any problems you may have encountered. In particular, be verbose about any segments where you have encoded two alternatives or where you were considering to do so."
  },
  {
    "objectID": "wiki/Workflow.html#preparing-a-new-tilia-file-for-analysis",
    "href": "wiki/Workflow.html#preparing-a-new-tilia-file-for-analysis",
    "title": "Workflow",
    "section": "Preparing a new TiLiA file for analysis",
    "text": "Preparing a new TiLiA file for analysis\nIn terms of files you will need:\n\na MusicXML file of the piece in question\nan unfolded notes TSV file as output by the ms3 parser (ms3 extract -a -N -u)\na public-domain audio recording or, in its absence, a synthesized rendition of the piece (we avoid YouTube renditions for reasons of data longevity)\n\nIn terms of software you’ll need:\n\nTiLiA, obviously\nms3_realtime which includes an installation of the ms3 parser\n\n\nAligning a score with an audio recording\n\nGenerate an aligned beat grid\nThe first step is to generate a &lt;filename&gt;.beatgrid.csv file containing a beat grid for the score, mapped to the corresponding timecodes in the recording.\nWhat you need:\n\na working Python environment with Python 3.10 or newer (we recommend Miniconda)\na MuseScore file of the piece in question\nan audio recording, possibly one in the public domain so that it can be shared\n\nfirst stop: IMSLP\nCreative Commons Search\nMusOpen (requires log-in)\narchive.org\nMusical Heritage Organization\n\n\nThen you can:\n\nhead to johentsch/ms3_realtime and do the first-time setup\nfollow the instructions under Deriving timelines from aligned notes\n\n\n\nImport the beatgrid into the TiLiA file\nInstructions are in the same document over there @ ms3_realtime.\n\n\nImport the score\n\nIf the score contains annotations, you first need to remove them.\n\n\n\n\nPreparing a repo: Batch alignment\n\nDownload public domain recordings\n\nBefore anything, rename them so that they can easily be matched with the scores but without removing important identifiers. E.g. for the bach_solo repo, the recordings combine the piece IDs with the original IMSLP filename: BWV1007_01_Prelude-IMSLP717130-PMLP164349-Casals.\nIf the original files are in WAV format, use that for alignment but add a conversion to MP3 to the repo. E.g.:\nfor f in *.wav; do ffmpeg -i \"$f\" -vn -ac 2 -codec:a libmp3lame -q:a 0 \"${f%.wav}.mp3\"; done\n\nMake sure that the unfolded notes table match the recordings. E.g., in the case of bach_solo suites BWV 1007 and 1008, the two minuets came in two separate scores but in a single audio file following the “minuet 1 da capo”. Although in theory it would be conceivable to split the audio recording, the obvious solution here is to create a unified score which encodes the repeat structure of the encoding and to create the unfolded notes table from that.\nCreate a batch CSV file mapping audio to notes TSV files.\n\nCreate a CSV file with the columns “audio” and “notes” containing the respective file paths. Paths should use / separators, not \\. Relative paths relative to the repo’s top level are advisable.\nFor controlling the output file names, an optional “name” column can be added.\n\nAlign\n\nms3_realtime approach (preferred)\n\nOutput CSV files for TiLiA import directly (-tla option).\nCommit to the respective subfolder under alignments.\n\nbeat_this approach (requires torch which can take time to set up)\n\nUse beat_this to create one .beats file per recording\nUse the beats2measuregrid.py script to convert the files to TiLiA’s CSV format.\n\n\nCreate TiLiA files manually."
  },
  {
    "objectID": "wiki/Workflow.html#re-align-an-existing-tilia-file",
    "href": "wiki/Workflow.html#re-align-an-existing-tilia-file",
    "title": "Workflow",
    "section": "Re-align an existing TiLiA file",
    "text": "Re-align an existing TiLiA file\nThis documents what to do in order to re-align the timelines in an existing TiLiA file with a different recording.\nRequirements\n\nA recording featuring the same flow through the score as reflected in the TiLiA file.\nA MuseScore file that unfolds correctly to that same file.\nThe TiLiA file needs to have a beat grid with the correct sequence of measure numbers.\n\nFor example, a 16-bar score in which the first 8 bars are repeated goes together with\n\na recording that plays the first 8 bars twice, followed by bars 9-16,\na TiLiA file with a beat grid that has measure numbers 1-8, then again 1-8, then 9-16.\n\nPreliminaries\nClone https://github.com/TimeToAlign/dashboard and, in a new virtual Python environment, execute pip install -r requirements.txt to install the dependencies.\nProcess\n\nExport the TiLiA file to JSON (File =&gt; Export =&gt; JSON).\nFollow the procedure above to create the .beatgrid.csv file which aligns the score with the new recording.\nActivate the correct virtual environment and execute\npython processing/notebooks/tilia_warp.py path/to/tilia_export.json path/to/piece.beatgrid.csv\nThis will output one CSV file per timeline in the TiLiA file with adjusted timecodes.\nCreate a new TiLiA file, add the local recording file, and import the CSV files one by one."
  },
  {
    "objectID": "wiki/Principles.html",
    "href": "wiki/Principles.html",
    "title": "Principles",
    "section": "",
    "text": "This section uses Frédéric Chopin: Mazurka in A-flat major, op. 24, 3 (1835) (see: Examples) to explain the use of TiLiA for creating form annotations."
  },
  {
    "objectID": "wiki/Principles.html#the-principle-of-having-a-top-level-root-spanning-the-entire-piece",
    "href": "wiki/Principles.html#the-principle-of-having-a-top-level-root-spanning-the-entire-piece",
    "title": "Principles",
    "section": "The principle of having a top level (“root”) spanning the entire piece",
    "text": "The principle of having a top level (“root”) spanning the entire piece\nEvery hierarchical form analysis must have a top level, spanning across the entire annotated section uninterrupted.\nThis analysis looks complete on the surface, but is missing the unifying label:\n\n\n\nChopin_no_top\n\n\nThese segments should be grouped up one more time, as above.\nLabeling of the top level: The part before the pipe symbol may be used to identify the music in a larger context, e.g. as a first movement of a sonata cycle. While the part after the symbol indicates what kind of form the piece as a whole has. If the piece is understood to be independent of any larger context, you can use generic names such as “piece”, “track”, “song” etc. The Chopin example was titled in this way, which indicates the interpretation that opus 24 is a rather loosely connected set of individual pieces, rather than a cycle expected to be heard in sequence.\nOther Examples:\n\nmov2|minuet_and_trio - The third movement of a sonata cycle, realized as a minuet with trio.\ntrack04|strophic - The fourth track in a rock album, which happens to be written in a strophic form (no chorus).\nexp|continuous - here the analysis only deals with the exposition section of a movement, so that is the head level. The exposition is continuous because it does not have a medial caesura or clear secondary theme zone."
  },
  {
    "objectID": "wiki/Principles.html#the-principle-of-locating-ideassub-phrases-at-the-bottom-level",
    "href": "wiki/Principles.html#the-principle-of-locating-ideassub-phrases-at-the-bottom-level",
    "title": "Principles",
    "section": "The principle of locating ideas/sub-phrases at the bottom level",
    "text": "The principle of locating ideas/sub-phrases at the bottom level\nThe lowest level of the hierarchy should correspond to individual musical ideas. For example in a Caplinian Style: bi (basic idea), ci (contrasting idea), cad (cadential), mod (model of a sequence), etc…\nMost pieces in the pilot corpus can be well described with Caplin-esque terms as the ones mentioned. In this Mazurka, the entire A section is a sentence with two continuation phrases.\n\n\n\nChopin_A"
  },
  {
    "objectID": "wiki/Principles.html#the-principle-of-consistent-labeling",
    "href": "wiki/Principles.html#the-principle-of-consistent-labeling",
    "title": "Principles",
    "section": "The principle of consistent labeling",
    "text": "The principle of consistent labeling\nLabeling should be consistent and follow the label vocabulary and syntax.\nThe figure above also illustrates the labeling syntax. The logic introduced at the highest level, where one label indicates the function of the segment, and the other the type that it has been realized as, is followed through to the bottom.\nIt must be understood that labels such as bi are related only to their local context. Repetions and variations of immediately preceding timespans on the same level can be indicated using % for larger sections, or the suffixes ! or ' for exact and varied repetition of an idea, respectively. If you wishes to indicate a non-adjacent repetition, you may assign a label using this syntax:\nx: theme|sent\nIn the example, the segment arbitrarily named x, which is originally a part of the presentation phrase, has been reused as part of the cadential idea."
  },
  {
    "objectID": "wiki/Principles.html#the-principle-of-giving-feedback",
    "href": "wiki/Principles.html#the-principle-of-giving-feedback",
    "title": "Principles",
    "section": "The principle of giving feedback",
    "text": "The principle of giving feedback\nCompleting the annotations is just one of two important goals of this pilot round, the other is to identify and improve the limitations of our current annotation system. If you encounter issues with the vocabulary, syntax or tool, please document it. For example, if you can’t express something important within the current framework or have trouble choosing an appropriate label. You can start a discussion or open an issue directly in the annotation_pilot GitHub repository. Your feedback is essential to refining the system."
  },
  {
    "objectID": "wiki/Home.html",
    "href": "wiki/Home.html",
    "title": "Markdown syntax",
    "section": "",
    "text": "This Wiki is a straightforward way to modify most contents of our guidelines homepage. However, the preferred way to edit the guidelines is to clone the guidelines repository with --recursive option and edit, preview, render and upload the website using Quarto (see below).\n\n[!WARNING] Please be careful editing syntactic elements which may be important for rendering the website. In particular, do not modify labels such as {#sec-tilia_layout}. The way how the pages are rendered in this wiki is completely irrelevant, as long as everything is showing correctly on the website.\n\nPages that can be edited here in the wiki are:\n\nIntro: What is form? A working definition\nWorkflow: Learn about the annotation tool\nPrinciples: Basic rules that should always hold\nSyntax: Syntactic rules of how labels can be combined, enhanced, and specified\nExamples: Example analysis and discussions thereof\n\nPages that cannot be edited here (only in the guidelines repo) are:\n\nindex.qmd: Start page called “Home” on the website.\nVocabulary.ipynb: Collection and explanation of possible form annotation labels (the notebook renders a CSV export of this spreadsheet)\nabout.qmd: About the form project\n\n\nMarkdown syntax\nThe website is rendered using Quarto. Please refer to its Markdown documentation to learn about its extended Markdown syntax. Github uses its own Markdown flavour and will not correctly render some of the Quarto syntax. This does not matter: What matters is that things are correctly rendered on the website."
  },
  {
    "objectID": "wiki/Annotation-Guidelines.html#classical-style",
    "href": "wiki/Annotation-Guidelines.html#classical-style",
    "title": "Intro",
    "section": "Classical Style",
    "text": "Classical Style"
  },
  {
    "objectID": "wiki/Annotation-Guidelines.html#pop-rock",
    "href": "wiki/Annotation-Guidelines.html#pop-rock",
    "title": "Intro",
    "section": "Pop Rock",
    "text": "Pop Rock"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Intro: What is form? A working definition\nWorkflow: Learn about the annotation tool\nPrinciples: Basic rules that should always hold\nVocabulary: Collection and explanation of possible form annotation labels\nSyntax: Syntactic rules of how labels can be combined, enhanced, and specified\nExamples: Example analysis and discussions thereof\nAbout: About the form project"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "https://data.snf.ch/grants/grant/10000183"
  },
  {
    "objectID": "Vocabulary.html",
    "href": "Vocabulary.html",
    "title": "Vocabulary",
    "section": "",
    "text": "Form labels and abbreviations\nThe table below is a subset of https://cloud.bruckneruni.at/index.php/s/awFF9yZE3reSxoG?dir=/&openfile=true which is still work in progress. These include the most relevant labels and abbreviations for piloting the guidelines.\nThe vocabulary of formal concepts referring to formal functions is grouped according to their position in the formal hierarchy: Movement, Section, Phrase, Subphrase levels. Each term corresponds either to a formal type or a formal function. Most labels come with an abbreviation which is the preferred way to use it.\nIn order to learn about how labels are combined, please refer to Syntax.\n\n\n\nForm label vocabulary\n\n\n\n\n\n\n\n\n\nHierarchical level\nFunction/type\nLabel\nShort label\nShort explanation\n\n\n\n\nPhrase level\nFunction\nantecedent\nant\n2-bar bi, 2-bar ci, ending with HC or IAC\n\n\nSubphrase level\nFunction\nbasic idea\nbi\nSmallest formal unit of a theme (typically 2 bars in length)\n\n\nSubphrase level\nFunction\ncadential idea\ncad\nRealizes a cadential progression at the end of a theme/phrase\n\n\nSection level\nFunction\nclosing theme\ncls\nfollows the EEC, new melodic material or primary theme based\n\n\nSection level\nFunction\ncoda\ncoda\nModule or section after the recapitulation, framing the movement (as an after-the-end function)\n\n\nSection level\nFunction\ncodetta\ncdta\nclosing section, various lenghts (single bar up to a larger phrase) → post-cadential\n\n\nSubphrase level\nFunction\ncompound basic idea\ncbi\nBasic idea is enlarged; it consists of two distinct parts, featuring prolongational harmony (rather than ending with a cadence).\n\n\nPhrase level\nFunction\nconsequent\ncons\nFollowing a first thematic phrase, there is a restatement of bi, closing with ci on PAC.\n\n\nSubphrase level\nFunction\ncontinuation\ncont\nSecond part of sentence, leads to cadence at the end (HC, IAC or PAC), unless the theme is of the dissolving type\n\n\nSubphrase level\nFunction\ncontinuation idea\nconti\nAn idea, different from the basic idea, initiating the continuation phrase of a sentence.\n\n\nSubphrase level\nFunction\ncontrasting idea\nci\nSmallest formal unit of a theme (typically 2 bars in length); is in (melodic and/or harmonic) contrast to a preceding basic idea.\n\n\nSection level\nFunction\ndevelopment section\ndev\n4 modules: 1) link from exposition; 2) entry zone; 3) central-action zone; 4) retransition\n\n\nSection level\nFunction\nessential expositional closure\neec\nstructural close of exposition\n\n\nSection level\nFunction\nessential sonata closure\nesc\nstructural close of whole sonata\n\n\nSection level\nFunction\nexposition\nexp\nTwo-part or continous form/type\n\n\nSection level\nFunction\nfirst theme\n1st\nThis is the first theme occuring in a theme zone, whether the primary, the secondary or the closing theme zone.\n\n\nSubphrase level\nFunction\nfragmentation\nfrag\nbreaking melodic material and/or formal units into smaller chunks\n\n\nPhrase level\nType\nhybrid1\nhyb1\nAntecedent + continuation\n\n\nPhrase level\nType\nhybrid2\nhyb2\nAntecedent + cadential progression\n\n\nPhrase level\nType\nhybrid3\nhyb3\ncompound basic idea + continuation\n\n\nPhrase level\nType\nhybrid4\nhyb4\ncompound basic idea + consequent\n\n\nSection level\nFunction\nintroduction\nintro\nModule or section before the exposition, framing the movement (as a before-the-beginning function)\n\n\nPhrase level\nType\nperiod\npd\nTwo-part structure, consisting of an antecendent (HC or IAC) and a consequent (concluded by PAC)\n\n\nSection level\nFunction\npostcadential\npcad\nmaterial after the cadential arrival; after PAC → closing section / codetta, after HC → standing on V ; “Anhang” in historical terminology\n\n\nSubphrase level\nFunction\npresentation\npres\nFirst part of sentence, containts two bi’s (rarely one or three bi’s), but does no lead to no cadence.\n\n\nSection level\nFunction\nprimary theme\npt\nEstablishes home key, presents primary melodic material, and/or introduces the instrumental apparatus. Also refer\n\n\nSection level\nFunction\nprimary theme zone\nptz\nEstablishes home key, presents primary melodic material, may contain more than one → primary themes\n\n\nSection level\nFunction\nrecapitulation\nrecap\nEssential sonata closure and re-composition\n\n\nSection level\nFunction\nretransition\nrtr\nMore specifically, in the classial style it concerns section between formal cadence and return of a new largeV or I in preparing the repeat of the exposition\n\n\nMovement level\nType\nritornello form\nritornello\nSix part structure: 1) opening ritornello for orchestra, 2) a solo section, 3) subordinate-key ritornello for orchestra, 4) solo section functioning as recapitulation, 6) closing ritornello for orchestra interrupted by solo cadenza\n\n\nMovement level\nType\nrondo form\nrondo\nAlternation of refrain (invariably in the tonic key, or changing keys) and contrasting couplets\n\n\nMovement level\nType\nrounded_binary\n\nABA’ structure, grouped such that a bipartite design emerges (also known as Minuet form).\n\n\nSection level\nFunction\nsecond theme\n2nd\nThis is the second theme occuring in a theme zone, whether the primary, the secondary or the closing theme zone.\n\n\nSection level\nFunction\nsecondary theme\nst\nleads to PAC in subordinate key and EEC\n\n\nSection level\nFunction\nsecondary theme zone\nstz\nleads to PAC in subordinate key and EEC, may contain more than one theme\n\n\nSection level\nFunction\nsection\nsec\nGeneric designator of a larger-scale unit of a formal whole (e.g., exposition, development).\n\n\nPhrase level\nType\nsentence\nsent\nTwo-part structure, consisting of a presentation (no cadence) and a continuation (concluded by a half or full cadence). The presentation in turn is made up of two (less frequently one or three) basic ideas.\n\n\nMovement level\nType\nsimple_binary\n\nAB or AA’\n\n\nMovement level\nType\nsimple_binary.balanced\n\nAB or AA’, with rhyming endings.\n\n\nMovement level\nType\nsonata form\nsonata\nBlending binary and ternary components, it involves a modulation and cadential confirmation of a secondary key (first part) as well as a transposition section (recapitulated 2nd theme in the tonic key; second part)\n\n\nMovement level\nSubtype\nsonata form.type1\nsonata.type1\nSonata form without development section\n\n\nMovement level\nSubtype\nsonata form.type2\nsonata.type2\nSonata form with second half merging development and recapitulation (typically lack of double return)\n\n\nMovement level\nSubtype\nsonata form.type3\nsonata.type3\nTernary sonata form (i.e., with main theme recapitulation)\n\n\nMovement level\nSubtype\nsonata form.type4\nsonata.type4\nRondo-sonata form / sonata-rondo form\n\n\nMovement level\nSubtype\nsonata form.type5\nsonata.type5\nConcerto sonata form\n\n\nMovement level\nType\nternary\n\nTripartite structure; if [A][BA’], it is referred to as “rounded binary”.\n\n\nMovement level\nType\nternary.da_capo\n\nABA; exact repetion of A without repeats.\n\n\nMovement level\nType\nternary.through_composed\n\nABC; tripartite structure with no repetitive relationships between the sections involved.\n\n\nSection level\nFunction\ntransition\ntr\nIndependent/new material or dissolving (primary based), move towards MC\n\n\nMovement level\nType\nunary form\nunary\nStructure without large-scale thematic repetition, potentially subdivided by caesurae and/or contrasting sections"
  },
  {
    "objectID": "wiki/Examples.html",
    "href": "wiki/Examples.html",
    "title": "Examples",
    "section": "",
    "text": "F. Chopin - Mazurka in A-flat major, op. 24, no. 3\n\nTiLiA file: chopin_24-3_example.tla\nRecording in the same folder (by Edward Neeman, downloaded from IMSLP)\n\n\n\n\nExample analysis\n\n\n\n\nJ.S. Bach – Sarabande from BWV 1007\n\nTiLiA file: TiLiA/BWV1007_04_Sarabande.tla\n\n\n\n\nExample analysis\n\n\nThis example presents two different analytical interpretations of this Suite movement’s first section. Whereas the second one, labeled as “Alternative”, uses our standard vocabulary, the first one is an experimental attempt to using the term Fortspinnungstypus, a staple in German-speaking Baroque theory. Here, the traditional three-part structure (Initiale, Fortspinnung, Kadenz; i.e. “beginning”, “continuation”, “cadential”) has been hierarchised into a pres + cont where the middle of the whole (Fortspinnung) is the beginning of the continuation and the cad is the ending of both the cont and the whole. This conceptualisation makes this type recognizable as a subtype of sent.\nWhereas this perspective groups the first part as [8 2 [6 2 [4 2 2] ] ], the second describes a symmetric [8 [4 2 2] [4 2 2] ] grouping (in this notation, each [ marks the parent node of a sub-branch, followed by its children and ]). Verbally, the first view sets the initial of the piece as apart and accounts for its being a relatively self-contained, chiastic open-close (or departure-arrival) motion which can stand for itself, like a motto. The second interpretation highlights the expositional character of the first four bars by grouping them under an overarching pres phrase. Contrary to the first view, the second compound basic idea is marked as a variation of the first one (cbi') because of a vague sense of return of the chiasmus. The first interpretation does not include the ' in the interest of reinforcing the sense of separation between measure 2 and 3.\nOn a minor note, the cad has been split on the lowest level to indicate the rhythmic-harmonic acceleration towards the cadence but no labels have been applied.\n\n\nF. Schubert - German Dance in D major, D. 790, no. 3\n\nTiLiA file: TiLiA/D790ländler03.tla\n\n\n\n\nExample analysis\n\n\nThis piece exhibits a number of typical features of a dance movement: Its 16 bars display a clear binary structure, with equal subdivision into two groups. Each of these 8-bar groups can be further subdivided into groups of 4 bars, which can themselves be segmented into 2-bar units, or even 1-bar units with unique musical material.\nThe first half stays in the home key throughout and conforms to the theme type of a “period,” with a 4-bar antecedent and a 4-bar consequent. The consequent starts out as a (motivic) repetition of the antecedent, just to end on a stronger cadence (a PAC rather than an IAC). The second half is launched with a sequential progression (6/5 -&gt; 4/2; bb. 9-12), using a 2-bar “model” consisting of a variant of the movement’s second bar prefaced by a newly composed bar. One particular challenge is the most fitting encoding of bar 13, which fulfils a double function: it acts both as the ending of the sequential pattern and the initial event of the subsequent cadential progression.\nEach segment expresses its temporal (or functional) suitability within the overarching formal plan through its intrinsic characteristics. Interestingly, each of the two 8-bar halves begins in itself as if being “in the middle” of something. At the very beginning, the piece opens up on an off-tonic harmony, withholding the tonic and key of D major at first, thus imparting a sense of “beginning in the middle.”\nThe repetition structure of musical material in this movement is interesting, too: it may be described in terms of (in)exact as well as proximate or distant relations between the material of segments. Note, for instance, that bb. 1–2 and bb. 5–6 establish exact repetition, bb. 9–10 and bb. 11–12 exhibit inexact (sequential) proximate repetition, whereas the final four bars of the Schubert dance constitute a distant repetition of the opening bars, but the way this return is realized cannot readily be labelled as a repetition, as it is only loosely based on bb. 1–4 and b. 9. The latter repetition constitutes the (loose!) end rhyme of the dance’s bipartite design. Hence the overall formal design can be characterized as a “simple binary” of the balanced (sub)type.\nNote that throughout this dance movement, Schubert plays a sophisticated game on motivic allusion and ambiguous grouping.\n\n\nJ. Haydn - Sonata in G major, Hob. XVI:6, Menuet and Trio\n\nTiLiA file: TiLiA/Haydn_Sonata_Hob.XVI-6-Menuet.tla\n\n\n\n\nExample analysis"
  },
  {
    "objectID": "wiki/Intro.html",
    "href": "wiki/Intro.html",
    "title": "Intro",
    "section": "",
    "text": "Our conception of musical form\nBefore starting to annotate musical forms, it is useful to familiarize oneself with a working definition of form. Although there is no universally shared understanding of musical form, we wish to propose a working definition that contains typical components of form:\n\nSegmentation: The auditory stream of events is usually subdivided (or grouped) into larger chunks of events. Segmentation may be based on a variety of factors such as gestalt principles or closing patterns (e.g., cadences). Furthermore, adjacent groups may be disjunct or conjunct to each other (phrase overlap).\nHierarchy: Groups of events can be combined into ever larger groups, thus creating hierarchical relationships between them. Groups located at different hierarchical are related by containment.\nFunctionality: Groups do not only occur at a certain temporal position within the overall structure; they can also express their form-functionality (i.e., their temporal qualities) through their intrinsic features (see below: interfaces with musical form). They may project a sense of beginning, middle, or end at different hierarchical levels. The formal function conveyed by a group may or may not coincide with the group’s temporal position. For instance, a larger formal unit may start with a cadential pattern (hence an ending function) or with a sequence (hence a middle function).\nRepetition structure: Groups may be repetitions or variations of other groups, or they express a contrast to other groups.\nFormal templates: the ordering of groups as well as the functionalities they express may be such that typical patterns emerge which we refer to as formal templates or designs (e.g., minuet form, rondo form, sonata form, etc.). Formal designs may also be the result of the combination of two (or more) formal types (e.g., a theme combining elements from a “sentence” and a “period”); this is known as hybrid form.\n\nAn important aspect to be included is “reinterpretation”: it is a characteristic feature of music in general that some structural hearings may not be static but depend on their temporal contextualization and the subsequent course of events during listening (which may or may not necessitate a re-evaluation of interpretation). Reinterpretation (or revision) is itself not a genuine aspect of the grammar, but a kind of effect that arises from processing during listening when the grammar allows for ambiguity. In the domain of form, this subdivides into two categories: (a) the functional reinterpretation of entire units based on later events; (b) the idea of “becoming” (i.e. gradual transformation) based on later events (e.g., a main-theme codetta turning into a transition).\nThe ways in which features (1) to (5) are analyzed depends on style-specific realizations of other structural domains (such as harmony, tonality, voice-leading, texture, instrumentation/timbre etc.) which may be understood as interfaces with musical form.\nNegative definitions of form: While it is certainly easier to come up with a list of features that, in one way or another, are associated with the concept of musical form, it is more difficult to set form apart from other concepts which may either be close to, or intersect with, the notion of form. One such related concept is “narrative” unfolding. For example, a piece of music may display the design of a “sonata form”, it may consist of functional units (such as themes, presentation phrases, and basic ideas); but whether the piece exemplifies a “per aspera ad astra” narrative trajectory (or some different narrative scheme), is to be considered distinct from the formal outline (with which it may interact, though). However, it is worth mentioning that, given the fluid boundaries of the theoretical concepts we are dealing with, the relationship between these concepts may turn out to be different at the end of our project.\n\n\nAnnotating musical form\nAs a fundamental principle we attribute formal functions to particular timespans. An annotation label consisting of a single term is interpreted as a formal function (e.g., cad for cadential). We aspire to design an ontology in which each function can be traced back to either a beginning, middle, or end function.\nIn addition, we may also attribute a formal type to a timespan, separated from the function by a pipe symbol (|). For example, we read the label 1st_theme|sent as “theme, realized as a sentence”.\nFurthermore, a timespan can be named, which is useful for referencing it in other parts of the analysis. A name always precedes the annotation label and can consist of any common printable character that is neither whitespace nor a colon, since a colon (:) separates the name from the label (e.g., superman_theme: theme|sent). Names should be unique within a single analysis so that they can be used to identify a particular timespan unambiguously. Please note that names such as A, a or α (alpha) evoke the expectancy of a corresponding timespan B, b or β (beta) on the same analytical level, probably as name of the right-adjacent timespan. Also keep in mind that the names A and B are conventionally used to name the two sections of a piece|ABA (piece realized as A-B-A).\nNames can be used to indicate distant repetitions of material, be they exact, varied, partial, or mere allusions. A label followed by a name in square brackets ([]) indicates an exact (or transposed) repetition of the referenced material. For example, coda|sent [superman_theme] signifies a coda consisting of a repetition of the material previously named superman_theme. A varied repetition can be marked as [superman_theme'], a partial repetition as [superman_theme*], and a partial varied repetition as [superman_theme*']—although it would be avisable to reserve these symbols for shorter timespans on the sub-thematic level. In cases where a repetition of musical material entails a repetition of the analytical sub-tree, the placeholder symbol % [name] can be used which, in absence of a named reference, stands for an exact repetition of the immediately preceding timespan’s sub-tree."
  },
  {
    "objectID": "wiki/Syntax.html",
    "href": "wiki/Syntax.html",
    "title": "Syntax",
    "section": "",
    "text": "Overview\nIn TiLiA, each element in a hierarchy timeline should be given a label. The use of labels should follow a syntax, which extends that of Gotham and Ireland (2019). This page outlines the most important features of this syntax.\n\n\n\n\n\n\n\n\nFeature\nSymbol\nExample\n\n\n\n\nFormal types\nDot (.)\n0: sonata form.type 2\n\n\nTypological realization\nPipe (|)\n4: antecedent | sentence\n\n\nAdjacent repetitions\nExclamation mark(s) (!, !!, !!!)\n6: bi; 6: bi!; 6: bi!!\n\n\nPartial emergences or repetitions\nAsterisk (*)\n4: 1st* or 4: 1st*!\n\n\nSpecification of units within units\nHyphen (-) + Arabic numeral\n4: 2nd-1\n\n\nDistant repetitions\nSquare brackets ([])\n3: 2nd zone, 4: 2nd-1 [1st-1*]\n\n\nAlternative readings\nHyphen (-)\n4: consequent - transition\n\n\nMultivalence\nLower-case Roman num. + hyphen (-)\n4i: consequent - ii: transition\n\n\nOverlap of formal levels\nAnd (&)\n4ii&iii: pres\n\n\nFormal hybrids\nLower-case letters\n0a: sonata form, 0b: rondo\n\n\nFunctional transformation\n‘Arrows’ (&lt;, &gt;, &lt;&gt;)\n4: transition, 5: &lt; consequent\n\n\nUncertainty\nQuestion mark (?)\n5: bi?\n\n\nOverlap/ continuation\nSlash (/)\ni: /, ii:\n\n\nOverlap\nPlus (+)\n1st + tr\n\n\nEnd of level\nClosing curly bracket (})\n6: bi}\n\n\n\n\n\nHierarchical Levels\nThe syntax can be applied on different annotation apps, though some aspects differ in usuage. In annotation in MuseScore, a typical first label of a sonata-form movement can look like this:\n0: mvt1|sonata.type1, 1: exp, 2: 1st zone, 3: theme|sent, 4: pres, 5: bi\nWhen using TiLiA, it is not necessary to specify the position within the hierarchical structure by an integer, since it is captured within the hierarchy timeline. One would simply write mvt1|sonata.type1 in the highest component. However, we still reference the integer levels in this guide in order to make the underlying logic clear.\n\n\nTypes and functions\nOur standard distinguishes between formal functions and types (Caplin 1998). Realisations of formal functions (on any hierarchical leve) are appended to the relevant token using a pipe symbol (|). For instance, the label component 0: mvt1|sonata.type1 is to be read as ‘first movement, realized as sonata form type 1’, while the component 3: theme|sent tells us that the theme within the 1st zone is realized as a Caplinian (or Schoenbergian) sentence.\nTiLiA does offer dedicated fields for types and function, but for now we recommend writing them into the “label” field in the inspector.\n\n\nVocabulary and abbreviations\nFor easier annotation, we have implemented a series of abbreviations for the most frequent terms in formal analysis. See the Vocabulary page for reference. In any case where you do not see a fitting label for a segment, you can use the neutral label unit.\n\n\nMaterial content and repetition\nDespite the standard’s focus on form, we allow for the annotation of material content and its use. * For the repetition of materials we propose marking adjacent repetitions with an exclamation mark (!) appended to the relevant token. The number of exclamation marks stands for the number of adjacent repetitions (for instance, 5: bi!! for the second adjacent repetition of a basic idea). * An asterisk appended to any label indicates that the re-occurrence of the relevant function is partial. * Distant repeats can be annotated using square brackets indicating the material that is repeated. For instance, 3: 2nd zone, 4: 2nd [1st*] would indicate a partial repeat of 1st-theme material in the secondary-theme zone, characteristic of the so-called monothematic exposition.\nTo avoid ambiguous references, it is possible to assign unique custom names to components that you wish to reference in other places, for example main_theme: theme|sent, means that we call this theme (realized as a sentence) “main_theme”, so if we later write coda [main_theme] it is clear that the coda is repeating that particular theme, not another.\n\n\nFormal transformation\n‘Form-functional transformation’ (Dahlhaus 1987; Schmalfeldt 2011) is expressed in our standard by separating the two functional tokens with greater-than (&gt;) or a less-than (&lt;) symbols, or both (&lt;&gt;). When the transformation occurs within a single formal level, the three symbols stand for the three possible directions: &gt; for forward transformation (Horton 2017), &lt; for retrospective transformation (Martin and Vande Moortele 2014), and &lt;&gt; for bidirectional transformation (Vande Moortele 2013).\n\n\nAmbiguity, diverging interpretations or multi-dimensional forms\nUncertain labels can be highlighted using a question mark. There are also cases where the form can be understood in several different ways, which are either mutually exclusive analytical perspectives, or different formal models being used at the same time. One example of “multidimensional form” could be the main theme zone of a sonata form being structured as a fugue, which invites two different modes of decoding the form at the same time. In both cases, one should open a seperate hierarchy timeline and use it as an addition to add the other layer for the relevant passage.\n\n\nCommon gotchas\n\n% used only for entire sections/sub-trees, not for immediate repetition of individual labels (!, !!, …) should be used for that).\ncbi = compound basic idea vs. ci = contrasting idea\nforgetting to add names + references where material is repeated\nduplicating/copying a sub-tree rather than using a reference to the original (use % [name] instead)\nincluding an alternative label separated by a hyphen (-) which would, however, invalidate the parent level if substituted (use a separate hierarchy timeline instead)\ndesignating cad as type (following a pipe symbol |cad) rather than as cadential function\n\n\n\n\n\n\n\n\n\nReferences\n\nCaplin, William E. 1998. Classical Form: A Theory of Formal Functions for the Instrumental Music of Haydn, Mozart, and Beethoven. Oxford University Press.\n\n\nDahlhaus, Carl. 1987. Beethoven Und Seine Zeit. Laaber: Laaber-Verlag.\n\n\nGotham, Mark, and Matthew T Ireland. 2019. “Taking Form: A Representation Standard, Conversion Code, and Example Corpus for Recording, Visualizing and Studying Analyses of Musical Form.” 20th International Society for Music Information Retrieval Conference, Delft, 633–99.\n\n\nHorton, Julian. 2017. “Criteria for a Theory of Nineteenth-Century Sonata Form.” Music Theory and Analysis 4 (11): 147–91. https://doi.org/10.11116/MTA.4.2.1.\n\n\nMartin, Nathan John, and Steven Vande Moortele. 2014. “Formal Functions and Retrospective Reinterpretation in the First Movement of Schubert’s String Quintet.” Music Analysis 33 (2): 130–55. https://doi.org/10.1111/musa.12025.\n\n\nSchmalfeldt, Janet. 2011. In the Process of Becoming: Analytic and Philosophical Perspectives on Form in Early Nineteenth-century Music. Oxford University Press.\n\n\nVande Moortele, Steven. 2013. “In Search of Romantic Form.” Music Analysis 32 (3): 404–31. https://www.jstor.org/stable/43864519."
  }
]